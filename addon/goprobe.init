#!/bin/bash
### BEGIN INIT INFO
# Provides:          goprobe
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Starts and stops the goProbe daemon
### END INIT INFO

# This code has been developed by Open Systems AG
#
# goProbe is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# goProbe is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with goProbe; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA


# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="goprobe init script"
NAME=goprobe
PIDFILE=/var/run/$NAME.pid

# installation directory (set during build process)
PREFIX=

DAEMON=$PREFIX/goProbe/bin/goProbe
DAEMON_CONF=$PREFIX/goProbe/etc/goprobe.conf

DAEMON_ARGS="-config $DAEMON_CONF"
SCRIPTNAME=/etc/init.d/goprobe.init

# DB Path is set by the config (the default path may not exist)
DB_PATH=$PREFIX/goProbe/db

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

. /lib/init/vars.sh
. /lib/lsb/init-functions

# change this if you installed goProbe in a custom location
export LD_LIBRARY_PATH=$PREFIX/goProbe/lib

is_configured() {
    if [ ! -e "$DAEMON_CONF" ]; then
        return 1
    else
        return 0
    fi
}

gp_fetch_stats() {
    local retval=0

    # try to extract DB_PATH
    if is_configured; then
        DB_PATH=$( sed -nr "s/.*\s+?\"db_path\"\s+?:\s+?\"([^\"]*)\"\s+?,.*/\1/p" $DAEMON_CONF  )
    else
        return 1
    fi

    states=$( echo "STATUS" | socat - UNIX-CONNECT:$DB_PATH/control.sock | sed 's/^DONE$//' )
    if [ "$states" = "" ]; then
       retval=1
    fi
    echo "$states"
    return $retval
}

do_start()
{
    # Return
    #   0 if daemon has been started
    #   1 if daemon was already running
    #   2 if daemon could not be started
    start-stop-daemon --start --background --make-pidfile --quiet --pidfile $PIDFILE --exec $DAEMON --test > /dev/null \
        || return 1
    start-stop-daemon --start --background --make-pidfile --quiet --pidfile $PIDFILE --exec $DAEMON -- \
        $DAEMON_ARGS \
        || return 2
}

do_stop()
{
    # Return
    #   0 if daemon has been stopped
    #   1 if daemon was already stopped
    #   2 if daemon could not be stopped
    #   other if a failure occurred
    [ ! -f "$PIDFILE" ] && echo "$PIDFILE not found" && return 1
    #kill all children (socat, line logger)
    ppid=`cat $PIDFILE`
    for i in `ps -ef| awk '$3 == '${ppid}' { print $2 }'`
     do
        kill $i
    done
    start-stop-daemon --stop --quiet --retry=TERM/10/KILL/5 --pidfile $PIDFILE
    RETVAL="$?"
    [ "$RETVAL" = 2 ] && return 2
    [ "$RETVAL" = 0 ] && rm -f $PIDFILE
    return "$RETVAL"
}

do_reload() {
    start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE --name $NAME
    return 0
}

case "$1" in
  start)
    [ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
    if ! is_configured; then
        echo -e "\e[00;31mFAIL\e[00m (not configured)"
        log_end_msg 1; exit 1
    fi
    do_start
    case "$?" in
        0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ; exit 0;;
        2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
    esac
    ;;
  stop)
    [ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
    do_stop
    case "$?" in
        0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ; exit 0;;
        2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
    esac
    ;;
  status)
    retval=0
    echo -n "Checking for running daemon ............... "
    pid=`pgrep -f "$DAEMON $DAEMON_ARGS"`
        if [ "$pid" != "" ]; then
          echo -e "\e[00;32mOK\e[00m   (PID $pid)"

          # fetch interface statistics
          if ! out=$( gp_fetch_stats ); then
            exit 1
          fi

           echo "1 $out" | $PREFIX/goProbe/shared/gp_status.pl
    else
          echo -e "\e[00;31mFAIL\e[00m (not running)"
      retval=1
        fi
    exit $retval
        ;;
  reload)
    retval=0
    echo -n "Reloading configuration ................... "
    pid=`pgrep -f "$DAEMON $DAEMON_ARGS"`
    if [ "$pid" != "" ]; then
          err=$( kill -12 $pid 2>&1 | sed 's/^kill: //g' )
          if [ $? -ne 0 ]; then
              retval=1
              echo -e "\e[00;31mFAIL\e[00m $err"
              exit $retval
          fi

          echo -e "\e[00;32mOK\e[00m"
    else
          echo -e "\e[00;31mFAIL\e[00m (not running)"
          retval=1
    fi
    exit $retval
        ;;
  restart|force-reload)
    log_daemon_msg "Restarting $DESC" "$NAME"
    do_stop
    case "$?" in
      0|1)
        if ! is_configured; then
            log_end_msg 0; exit 0
        fi
        do_start
        case "$?" in
            0) log_end_msg 0 ; exit 0;;
            1) log_end_msg 1 ; exit 0;; # Old process is still running
            *) log_end_msg 1 ;;         # Failed to start
        esac
        ;;
      *)
          # Failed to stop
        log_end_msg 1
        ;;
    esac
    ;;
  *)
    #echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}" >&2
    echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
    exit 3
    ;;
esac
